<?php

/**
 * @file
 * Drupal Module: OE Piwik.
 *
 * Adds the required Webtools widget to all your Drupal pages
 * to allow tracking by the Piwik statistics package.
 *
 * @author: Original Piwik module: Alexander Hass <http://drupal.org/user/85918>
 */

use Drupal\oe_piwik\Entity\PiwikRule;
use Drupal\Core\Render\Markup;
use Drupal\Component\Utility\Unicode;

/**
 * Implements hook_help().
 */
function oe_piwik_help($route_name, $route_match) {
  switch ($route_name) {
    case 'help.page.oe_piwik':
      return t('<a href=":pk_url">Piwik - Web analytics</a> is an open source (GPL license) web analytics software. It gives interesting reports on your website visitors, your popular pages, the search engines keywords they used, the language they speak... and so much more. Piwik aims to be an open source alternative to Google Analytics.', [':pk_url' => 'http://www.piwik.org/']);
  }
}

/**
 * Implements hook_page_attachments().
 *
 * This adds the webtools js to the head.
 */
function oe_piwik_page_attachments(array &$attachments) {
  $account = \Drupal::currentUser();
  $variables = \Drupal::config('oe_piwik.settings');
  $id = $variables->get('oe_piwik_site_id');
  // Get page status code for visibility filtering.
  $request = \Drupal::request();
  $status = NULL;
  if ($exception = $request->attributes->get('exception')) {
    $status = $exception->getStatusCode();
  }
  $trackable_status_codes = [
    // "Forbidden" status code.
    '403',
    // "Not Found" status code.
    '404',
  ];

  // 1. Check if the GA account number has a valid value.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  // 4. Ignore pages visibility filter for 404 or 403 status codes.
  if (preg_match('/^\d{1,}$/', $id) && (_oe_piwik_visibility_pages() || in_array($status, $trackable_status_codes)) && _oe_piwik_visibility_roles($account)) {
    // Loading variables.
    $smartloader_prurl = $variables->get('oe_piwik_smartloader_prurl');
    // Add smart loader.
    // Ensure to use a PR URL (compatibility for http/https).
    $smartloader_prurl = preg_replace("#^https?:#", "", $smartloader_prurl);
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => ['src' => $smartloader_prurl],
      ],
      'oe_piwik_smartloader_prurl',
    ];
  }
}

/**
 * Implements hook_page_bottom().
 *
 * Add the custom instance variables. That has to be done in the footer region.
 * We need application/json.
 */
function oe_piwik_page_bottom(array &$page_bottom) {
  $variables = \Drupal::config('oe_piwik.settings');
  $id = $variables->get('oe_piwik_site_id');
  $instance = $variables->get('oe_piwik_site_instance');
  $site_path = $variables->get('oe_piwik_site_path');
  $site_section = $variables->get('oe_piwik_site_section');

  // Get page status code for visibility filtering.
  $request = \Drupal::request();
  $status = NULL;
  if ($exception = $request->attributes->get('exception')) {
    $status = $exception->getStatusCode();
  }

  // Strip http & https from site_path variable and transforming in to array.
  $site_path = preg_replace('#^https?://#', '', $site_path);
  $site_path = explode(PHP_EOL, $site_path);

  // Create settings array.
  $webtools_piwik_settings = [
    'utility' => $variables->get('oe_piwik_utility'),
    'siteID' => $id,
    'sitePath' => $site_path,
    'is404' => FALSE,
    'is403' => FALSE,
    'instance' => $instance,
  ];

  // Search results pages.
  if (\Drupal::moduleHandler()->moduleExists('search') && $variables->get('oe_piwik_site_search') && (strpos(\Drupal::routeMatch()->getRouteName(), 'search.view') === 0) && $keys = ($request->query->has('keys') ? trim($request->get('keys')) : '')) {
    global $pager_total_items;
    $results_count = 0;

    if (isset($pager_total_items[0])) {
      $results_count = strval($pager_total_items[0]);
    }

    $webtools_piwik_settings['search']['keyword'] = $keys;
    $webtools_piwik_settings['search']['count'] = $results_count;
  }

  // Track file not found (404) pages.
  if ($status == '404') {
    $webtools_piwik_settings['is404'] = TRUE;
  }

  // Track forbidden (403) accesses.
  if ($status == '403') {
    $webtools_piwik_settings['is403'] = TRUE;
  }

  if (!empty($site_section)) {
    $webtools_piwik_settings['siteSection'] = $site_section;
  }

  // Advanced PIWIK rules integration point.
  if ($variables->get('oe_piwik_rules_state')) {
    if ($piwik_rule = _oe_piwik_get_piwik_rule()) {
      $webtools_piwik_settings['siteSection'] = $piwik_rule->rule_section;
    }
  }

  $webtools_piwik_settings = strip_tags(json_encode($webtools_piwik_settings));

  // Add application/json tag.
  $page_bottom['oe_piwik'] = [
    '#markup' => Markup::create('<script type="application/json">' . $webtools_piwik_settings . '</script>'),
  ];
}

/**
 * Tracking visibility check for user roles.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added for the current role and otherwise FALSE.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if JS code should be added for the current role and otherwise FALSE.
 */
function _oe_piwik_visibility_roles($account) {

  $config = \Drupal::config('oe_piwik.settings');
  $enabled = $visibility_user_role_mode = $config->get('oe_piwik_visibility_roles');
  $visibility_user_role_roles = $config->get('oe_piwik_roles');

  if (count($visibility_user_role_roles) > 0) {
    // One or more roles are selected.
    foreach (array_values($account->getRoles()) as $user_role) {
      // Is the current user a member of one of these roles?
      if (in_array($user_role, $visibility_user_role_roles)) {
        // Current user is a member of a role that should be tracked/excluded
        // from tracking.
        $enabled = !$visibility_user_role_mode;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check for pages.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added to the current page and otherwise FALSE.
 */
function _oe_piwik_visibility_pages() {

  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $config = \Drupal::config('oe_piwik.settings');
    $visibility_request_path_mode = $config->get('oe_piwik_visibility_pages');
    $visibility_request_path_pages = $config->get('oe_piwik_pages');

    // Match path if necessary.
    if (!empty($visibility_request_path_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = Unicode::strtolower($visibility_request_path_pages);
      if ($visibility_request_path_mode < 2) {
        // Compare the lowercase path alias (if any) and internal path.
        $path = \Drupal::service('path.current')->getPath();
        $path_alias = Unicode::strtolower(\Drupal::service('path.alias_manager')->getAliasByPath($path));
        $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages) || (($path != $path_alias) && \Drupal::service('path.matcher')->matchPath($path, $pages));
        // When $visibility_request_path_mode has a value of 0, the tracking
        // code is displayed on all pages except those listed in $pages. When
        // set to 1, it is displayed only on those pages listed in $pages.
        $page_match = !($visibility_request_path_mode xor $page_match);
      }
      elseif (\Drupal::moduleHandler()->moduleExists('php')) {
        $page_match = php_eval($visibility_request_path_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Helper function for grabbing search keys. Function is missing in D7.
 *
 * Http://api.drupal.org/api/function/search_get_keys/6
 */
function oe_piwik_search_get_keys() {
  static $return;
  if (!isset($return)) {
    // Extract keys as remainder of path
    // Note: support old GET format of searches for existing links.
    $path = explode('/', $_GET['q'], 3);
    $keys = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];
    $return = count($path) == 3 ? $path[2] : $keys;
  }
  return $return;
}

/**
 * Returns the site section name based on the advanced PIWIK rules.
 *
 * @return mixed
 *   PIWIK rule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _oe_piwik_get_piwik_rule() {
  // Get the current path and convert to lowercase.
  $path = Unicode::strtolower(\Drupal::service('path.current')->getPath());

  // Get the current language.
  $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Overwrite path value for the front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $path = '<front>';
  }

  // Get the advanced PIWIK rule based on the direct path.
  if ($piwik_rule = _oe_piwik_get_direct_path_rule($path, $lang_code)) {
    return $piwik_rule;
  }

  // Get the advanced PIWIK rule based on the regular expression rule.
  if ($piwik_rule = _oe_piwik_get_regexp_path_rule($path, $lang_code)) {
    return $piwik_rule;
  }

  return FALSE;
}

/**
 * Returns the PIWIK rule for the direct rule path type.
 *
 * @param string $rule_path
 *   Current path.
 * @param string $lang_code
 *   Current language.
 *
 * @return mixed
 *   PIWIK rule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _oe_piwik_get_direct_path_rule($rule_path, $lang_code) {
  $database = \Drupal::database();
  $query = $database->query("SELECT id FROM {oe_piwik_rule} WHERE rule_path = :rule_path AND rule_path_type = :rule_path_type", [
    ':rule_path' => $rule_path,
    ':rule_path_type' => PiwikRule::DIRECT_PATH,
  ]);
  $results = $query->fetchAllAssoc('id');

  if ($results) {
    return _oe_piwik_filter_results($results, $rule_path, $lang_code);
  }

  return FALSE;
}

/**
 * Returns the PIWIK rule for the regular expression rule path type.
 *
 * @param string $rule_path
 *   Current path.
 * @param string $lang_code
 *   Current language.
 *
 * @return mixed
 *   PIWIK rule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _oe_piwik_get_regexp_path_rule($rule_path, $lang_code) {
  // The db_query function is used to perform query with REGEXP option.
  $database = \Drupal::database();
  $query = $database->query("SELECT id FROM {oe_piwik_rule} WHERE rule_path_type = :rule_path_type AND :path REGEXP `rule_path`", [
    ':path' => $rule_path,
    ':rule_path_type' => PiwikRule::REGEXP_PATH,
  ]);

  $results = $query->fetchAllAssoc('id');

  if ($results) {
    return _oe_piwik_filter_results($results, $rule_path, $lang_code);
  }

  return FALSE;
}

/**
 * Filters results and returns the PIWIK rule.
 *
 * @param array $results
 *   An array with the PIWIK rules IDs.
 * @param string $path
 *   Current path.
 * @param string $lang_code
 *   Current language.
 *
 * @return mixed
 *   PiwikRule entity
 *   FALSE if there is no rule for the currently processed path.
 */
function _oe_piwik_filter_results(array $results, $path, $lang_code) {
  // Log the overlapping rules case.
  if (count($results) > 1) {
    \Drupal::logger('oe_piwik')->notice('Overlapping PIWIK rules for the following path detected: @path. Overlapping rules IDs: @rules_ids', [
      '@path' => $path,
      '@rules_ids' => implode(', ', array_keys($results)),
    ]);
  }

  // Return PIWIK rule.
  $lang_code_rules = [];
  $lang_all_rules = [];

  $piwik_rules = PiwikRule::loadMultiple(array_keys($results));
  foreach ($piwik_rules as $piwik_rule) {
    if ($lang_code === $piwik_rule->get('rule_language')->value) {
      $lang_code_rules[$piwik_rule->get('id')->value] = $piwik_rule;
    }
    if ($piwik_rule->get('rule_language')->value === 'all') {
      $lang_all_rules[$piwik_rule->get('id')->value] = $piwik_rule;
    }
  }
  // Return latest rule for the defined language.
  if (!empty($lang_code_rules)) {
    return _oe_piwik_get_latest_rule($lang_code_rules);
  }

  // Return latest rule defined for all languages.
  if (!empty($lang_all_rules)) {
    return _oe_piwik_get_latest_rule($lang_all_rules);
  }

  return FALSE;
}

/**
 * Returns the latest rule object from the array.
 *
 * @param array $rules_array
 *   An array with the PiwikRule objects keyed by the id.
 *
 * @return Drupal\oe_piwik\Entity\PiwikRule
 *   PiwikRule entity.
 */
function _oe_piwik_get_latest_rule(array $rules_array) {
  ksort($rules_array, SORT_DESC);
  return array_pop($rules_array);
}
